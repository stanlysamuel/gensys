//-- State: c_floor

assume {
  ge c_floor i1();
  ge i4() c_floor;
}

always guarantee {
  ge c_floor i1();
  ge i3() c_floor;
  [c_floor <- sub c_floor i1()] || [c_floor <- add c_floor i1()] || [c_floor <- c_floor];
  F (eq c_floor i1());
  F (eq c_floor i2());
  F (eq c_floor i3());
}

always assume {
  !(ge i3() c_floor) && [ c_floor <- (add c_floor i1()) ] -> X !(ge i4() c_floor);
  ge i4() c_floor && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge i3() c_floor));
}

always assume {
  !(!(eq c_floor i2()) && !(eq c_floor i3()) && !(eq c_floor i1()) && ge i3() c_floor && ge c_floor i1());
}

always assume {
  !(!(ge i3() c_floor) && !(ge c_floor i1()));
  !(eq c_floor i1() && !(ge c_floor i1()));
  !(eq c_floor i1() && !(ge i3() c_floor));
  !(eq c_floor i2() && !(ge i3() c_floor));
  !(eq c_floor i3() && !(ge i3() c_floor));
  !(ge i3() c_floor && !(ge i4() c_floor));
}

always assume {
  !(eq c_floor i2() && !(ge c_floor i1()));
  !(eq c_floor i2() && eq c_floor i1());
  !(eq c_floor i2() && eq c_floor i3());
  !(eq c_floor i3() && !(ge c_floor i1()));
  !(eq c_floor i3() && eq c_floor i1());
}

always assume {
  !(eq c_floor i1()) && ge c_floor i1() && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge c_floor i1()));
  !(ge c_floor i1()) && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge i3() c_floor));
  !(ge c_floor i1()) && [ c_floor <- (sub c_floor i1()) ] -> X !(ge c_floor i1());
  !(ge c_floor i1()) && [ c_floor <- c_floor ] -> X !(!(ge i3() c_floor));
  !(ge i3() c_floor) && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge c_floor i1()));
  !(ge i3() c_floor) && [ c_floor <- (sub c_floor i1()) ] -> X !(eq c_floor i1());
  !(ge i3() c_floor) && [ c_floor <- (sub c_floor i1()) ] -> X !(eq c_floor i2());
  !(ge i4() c_floor) && [ c_floor <- c_floor ] -> X !(ge i4() c_floor);
  eq c_floor i1() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge i3() c_floor));
  eq c_floor i1() && [ c_floor <- (sub c_floor i1()) ] -> X !(ge c_floor i1());
  eq c_floor i1() && [ c_floor <- c_floor ] -> X !(!(eq c_floor i1()));
  eq c_floor i2() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge i3() c_floor));
  eq c_floor i2() && [ c_floor <- (sub c_floor i1()) ] -> X !(!(eq c_floor i1()) && ge c_floor i1());
  eq c_floor i2() && [ c_floor <- c_floor ] -> X !(!(eq c_floor i2()));
  eq c_floor i3() && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge c_floor i1()));
  eq c_floor i3() && [ c_floor <- (sub c_floor i1()) ] -> X !(eq c_floor i1());
  eq c_floor i3() && [ c_floor <- c_floor ] -> X !(!(eq c_floor i3()));
  ge i3() c_floor && [ c_floor <- (sub c_floor i1()) ] -> X !(eq c_floor i3());
}

always assume {
  ge c_floor i1() && [ c_floor <- (add c_floor i1()) ] -> X !(eq c_floor i1());
}

always assume {
  ge c_floor i1() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge c_floor i1()));
}

always assume {
  !(ge i3() c_floor) && [ c_floor <- c_floor ] -> X !(!(ge c_floor i1()));
  ge i3() c_floor && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge i4() c_floor));
}

always assume {
  !(eq c_floor i3()) && [ c_floor <- c_floor ] -> X !(eq c_floor i3());
  !(ge c_floor i1()) && [ c_floor <- (add c_floor i1()) ] -> X !(!(eq c_floor i1()) && ge c_floor i1());
  eq c_floor i1() && [ c_floor <- (add c_floor i1()) ] -> X !(eq c_floor i3());
  ge i4() c_floor && [ c_floor <- c_floor ] -> X !(!(ge i4() c_floor));
}

always assume {
  !(eq c_floor i2()) && [ c_floor <- c_floor ] -> X !(eq c_floor i2());
}

always assume {
  !(eq c_floor i1()) && ge c_floor i1() && [ c_floor <- (add c_floor i1()) ] -> X !(eq c_floor i2());
  eq c_floor i3() && [ c_floor <- (add c_floor i1()) ] -> X !(ge i3() c_floor);
}

always assume {
  eq (add c_floor i1()) i1() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge c_floor i1()));
  ge (add c_floor i1()) i1() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge c_floor i1()));
  ge i4() (sub c_floor i1()) && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge i4() c_floor));
}

always assume {
  !(!(eq c_floor i1()) && !(ge (add c_floor i1()) i1()) && ge c_floor i1());
  !(!(ge (add c_floor i1()) i1()) && !(ge i3() c_floor));
  !(!(ge (add c_floor i1()) i1()) && ge c_floor i1());
  !(!(ge i4() (sub c_floor i1())) && ge i4() c_floor);
  !(eq c_floor i3() && !(ge (add c_floor i1()) i1()));
}

always assume {
  !(eq (add c_floor i1()) i1()) && ge (add c_floor i1()) i1() && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge (add c_floor i1()) i1()));
  ge i4() c_floor && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge i4() (sub c_floor i1())));
}

always assume {
  !(!(eq (add c_floor i1()) i1()) && ge (add c_floor i1()) i1() && !(ge c_floor i1()));
}

always assume {
  !(ge i4() c_floor) && [ c_floor <- (add c_floor i1()) ] -> X !(ge i4() (sub c_floor i1()));
  eq (add c_floor i1()) i1() && [ c_floor <- c_floor ] -> X !(!(eq (add c_floor i1()) i1()));
}

always assume {
  !(eq c_floor i1()) && [ c_floor <- c_floor ] -> X !(eq c_floor i1());
  !(ge i4() (sub c_floor i1())) && [ c_floor <- (sub c_floor i1()) ] -> X !(ge i4() c_floor);
  !(ge i4() (sub c_floor i1())) && [ c_floor <- c_floor ] -> X !(ge i4() (sub c_floor i1()));
  !(ge i4() c_floor) && [ c_floor <- (sub c_floor i1()) ] -> X !(ge i3() c_floor);
}

always assume {
  ge i4() (sub c_floor i1()) && [ c_floor <- c_floor ] -> X !(!(ge i4() (sub c_floor i1())));
}

always assume {
  eq (add (add c_floor i1()) i1()) i1() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge (add c_floor i1()) i1()));
  ge (add (add c_floor i1()) i1()) i1() && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge (add c_floor i1()) i1()));
  ge i4() (sub (sub c_floor i1()) i1()) && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge i4() (sub c_floor i1())));
}

always assume {
  !(!(eq (add c_floor i1()) i1()) && !(ge (add (add c_floor i1()) i1()) i1()) && ge (add c_floor i1()) i1());
  !(!(ge (add (add c_floor i1()) i1()) i1()) && !(ge i3() c_floor));
  !(!(ge (add (add c_floor i1()) i1()) i1()) && ge (add c_floor i1()) i1());
  !(!(ge i4() (sub (sub c_floor i1()) i1())) && ge i4() (sub c_floor i1()));
}

always assume {
  !(eq (add (add c_floor i1()) i1()) i1()) && ge (add (add c_floor i1()) i1()) i1() && [ c_floor <- (sub c_floor i1()) ] -> X !(!(ge (add (add c_floor i1()) i1()) i1()));
  ge i4() (sub c_floor i1()) && [ c_floor <- (add c_floor i1()) ] -> X !(!(ge i4() (sub (sub c_floor i1()) i1())));
}

always assume {
  !(!(eq (add (add c_floor i1()) i1()) i1()) && ge (add (add c_floor i1()) i1()) i1() && !(ge (add c_floor i1()) i1()));
}

always assume {
  !(ge i4() (sub c_floor i1())) && [ c_floor <- (add c_floor i1()) ] -> X !(ge i4() (sub (sub c_floor i1()) i1()));
  eq (add (add c_floor i1()) i1()) i1() && [ c_floor <- c_floor ] -> X !(!(eq (add (add c_floor i1()) i1()) i1()));
}

//-- State: floor, target
//-- Inputs: signal

assume {
  eq target i0();
  ge floor i1();
  ge i4() floor;
}

always assume {
  ge signal i0();
  ge i4() signal;
  !(eq target i0()) -> eq signal i0();
}

always guarantee {
  ge floor i1(); /* INV */
  ge i4() floor; /* INV */
  !(eq signal i0()) && !(eq floor target) -> [target <- signal];
  eq signal i0() && !(eq floor target) -> [target <- target];
  eq floor target -> [target <- i0()];

  [floor <- floor] || [floor <- add floor i1()] || [floor <- sub floor i1()];

  eq target i1() -> F (eq floor i1());
  eq target i2() -> F (eq floor i2());
  eq target i3() -> F (eq floor i3());
  eq target i4() -> F (eq floor i4());
}

always assume {
  !(eq target i3() && eq target i2());
}

always assume {
  !(eq target i4() && eq target i1());
}

always assume {
  !(!(ge i4() floor) && !(ge floor i1()));
  !(eq target i1() && eq target i0());
  !(eq target i2() && eq target i0());
  !(eq target i2() && eq target i1());
  !(eq target i2() && eq target i4());
  !(eq target i3() && eq target i0());
  !(eq target i3() && eq target i1());
  !(eq target i3() && eq target i4());
  !(eq target i4() && eq target i0());
  !(ge floor i1() && eq floor target && eq target i0());
  !(ge i4() floor && ge floor i1() && !(eq floor i3()) && !(eq floor i2()) && !(eq floor i4()) && !(eq floor i1()));
}

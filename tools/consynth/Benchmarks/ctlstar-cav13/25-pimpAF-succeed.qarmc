% No. 25 from Eric's paper (Industrial)
/*
#include "../ctl.h"
// Property: c > 5 => F(resp > 5)

int c;
int servers ;
int resp;
int curr_serv;

int __rho_1_;
unsigned int pc;
int __phi() { return COR(CAP(c<=5),CAF(CAP(resp>5))); }

void init() {
  c = nondet(); assume(c>0);
  servers = 8;
  resp = 0;
  curr_serv = servers;
}

int body() {
  while(1) {
    if (!(curr_serv > 0)) break;
    __rho_1_ = nondet();
    if(__rho_1_>0) {
      c--; curr_serv--;
      resp++;
    } else {
      assume(c < curr_serv);
      curr_serv--;
    }
  }
  while(1) { dummy=dummy; } L_return: return 0;
}

int main() {}
*/

init(C,R,CS,PC):=C>=1,R=0,CS=8,PC=1.
next(C,R,CS,PC,Cp,Rp,CSp,PCp):=
    PC=1,CS=<0,Cp=C,Rp=R,CSp=CS,PCp=2;
    PC=1,CS>0,Cp=C,Rp=R,CSp=CS,PCp=3;
    PC=3,C>=CS,Cp=C-1,Rp=R+1,CSp=CS-1,PCp=1;
    PC=3,C<CS,Cp=C-1,Rp=R+1,CSp=CS-1,PCp=1;
    PC=3,C<CS,Cp=C,Rp=R,CSp=CS-1,PCp=1.
dst(C,R,CS,PC):=R>=6.

% init => (c<=5 \/ AF r>5) = init /\ c > 5 => AF r>5
phi0(C,R,CS,PC):-init(C,R,CS,PC),C>=6.
phi0(Cp,Rp,CSp,PCp):-phi0(C,R,CS,PC),next(C,R,CS,PC,Cp,Rp,CSp,PCp),\+dst(C,R,CS,PC).
rank(C,R,CS,PC,Cp,Rp,CSp,PCp):-phi0(C,R,CS,PC),next(C,R,CS,PC,Cp,Rp,CSp,PCp),\+dst(C,R,CS,PC).
exists([Cp,Rp,CSp,PCp],next(C,R,CS,PC,Cp,Rp,CSp,PCp)):-phi0(C,R,CS,PC),\+dst(C,R,CS,PC).
wf(rank/8).

query_naming(phi0(c,r,cs,pc)).
query_naming(rank(c,r,cs,pc,'c\'','r\'','cs\'','pc\'')).
query_naming(rank_p(c,r,cs,pc,'c\'','r\'','cs\'','pc\'')).

query_finite_sorts(phi0/4,[4]).
query_finite_sorts(rank/8,[4,8]).
query_finite_sorts(rank_p/8,[4,8]).

% time ./ctlstar tests/ctlstar-Erics/Industrial/25-pimpAF-succeed.qarmc -no-extra-insert-pred
% program correct after 10.4 sec
% With '-case-split': 'program is correct' after 1m27.8

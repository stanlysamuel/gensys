% No. 3 from Eric's paper (Industrial)
/*
#include "../ctl.h"

int n; int A; int R;
unsigned int pc;
int __phi() { return CAG(CIMP(CAP(A==1),CEF(CAP(R==1)))); }

int init() { A=0; R=0; }
int dobreak;
int __rho_1_;

int body() {
  __rho_1_ = nondet();
  dobreak = __rho_1_;
  while(1) {
    if (dobreak > 0) break;
    A = 1;
    A = 0;
    __rho_1_ = nondet();
    n = __rho_1_;
    //assume(n>0);
    while(1) {
      if (!(n>0)) break;
      // should loop forever here
      n = n + 0;
    }
    R = 1;
    R = 0;
    __rho_1_ = nondet();
    dobreak = __rho_1_;
  }
  while(1) { dummy=dummy; } L_return: return 0;  
}

int main() { }
*/
% exists([x], AG(a=x -> EF r=1))
init(A,R,N,PC):-A=0,R=0,PC=1.
next(A,R,N,PC,Ap,Rp,Np,PCp):=
    PC=1,Ap=A,Rp=R,Np=N,PCp=5;
    PC=1,Ap=1,Rp=R,Np=N,PCp=2;
    PC=2,Ap=0,Rp=R,Np=N,PCp=3;
    PC=3,Ap=A,Rp=R,Np=N,PCp=3;
    PC=3,Ap=A,Rp=1,Np=N,PCp=4;
    PC=4,Ap=A,Rp=0,Np=N,PCp=1.
dst(A,R,N,PC,X):=R=1.
% init => AG p1
phi0(A,R,N,PC):-init(A,R,N,PC).
phi0(Ap,Rp,Np,PCp):-phi0(A,R,N,PC),next(A,R,N,PC,Ap,Rp,Np,PCp).
p1(A,R,N,PC):-phi0(A,R,N,PC).
% p1(v) => exists([x], aux(v,x))
exists([X],q1(X)):-id(1),p1(A,R,N,PC).
aux(A,R,N,PC,X):-s1(A,R,N,PC,X),p1(A,R,N,PC).
skolem_template(s1, [A,R,N,PC,X], true, true, X=Tx, (Tx=0;Tx=1)).
% aux /\ a=x => EF r=1
phi1(A,R,N,PC,X):-aux(A,R,N,PC,X),A=X.
exists([Ap,Rp,Np,PCp],(rank(A,R,N,PC,Ap,Rp,Np,PCp),phi1(Ap,Rp,Np,PCp,X))):-phi1(A,R,N,PC,X),\+dst(A,R,N,PC,X).
wf(rank/8).
skolem_template(s14, [A,R,N,PC,_,Ap,Rp,Np,PCp],
 		true,
		(PC>=1 ,PC=<4),
	       (
		 B1=0,PC=1,Ap=A,Rp=R,Np=N,PCp=5;
		 B1=1,PC=1,Ap=1,Rp=R,Np=N,PCp=2;
		 PC=2,Ap=0,Rp=R,Np=N,PCp=3;
		 B2=0,PC=3,Ap=A,Rp=R,Np=N,PCp=3;
		 B2=1,PC=3,Ap=A,Rp=1,Np=N,PCp=4;
		 PC=4,Ap=A,Rp=0,Np=N,PCp=1
 		),
 		((B1=0;B1=1),(B2=0;B2=1))
 	       ).
query_naming(phi0(a,r,n,pc)).
query_naming(p1(a,r,n,pc)).
query_naming(aux(a,r,n,pc,x)).
query_naming(phi1(a,r,n,pc,x)).
query_naming(s14(a,r,n,pc,x,'a\'','r\'','n\'','pc\'')).
query_naming(rank(a,r,n,pc,'a\'','r\'','n\'','pc\'')).
query_naming(rank_p(a,r,n,pc,'a\'','r\'','n\'','pc\'')).
query_finite_sorts(phi0/4,[4]).
query_finite_sorts(p1/4,[4]).
query_finite_sorts(aux/5,[4]).
query_finite_sorts(phi1/5,[4]).
query_finite_sorts(s9/8,[4,8]).
query_finite_sorts(rank/8,[4,8]).
query_finite_sorts(rank_p/8,[4,8]).
% time ./ctlstar tests/ctlstar-ctlfo/3-2-AGimpEF-succeed.qarmc -no-extra-insert-pred -use-next-skolem
% 'program correct' after 1.0 sec


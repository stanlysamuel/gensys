% No. 35 from Eric's paper (Industrial)
/*
#include "../ctl.h"

// Property: G(a => F r)

#define STATUS_SUCCESS 1
#define STATUS_OBJECT_NAME_COLLISION 2
#define PC_IO 1
#define PC_NIO 0
int pc;
int i; int Pdolen; int num; int DName;
int lptNamei; //[5];
int dcIdi; // [5];
int Pdoi; //[5];
int PdoType; int status;

int set; int unset;
int __phi() { return CEF(CAND(CAP(set==1),CAG(CAP(unset!=1)))); }

void init() { set = unset = 0; }

// The Program
int PPMakeDeviceName(int a, int b, int c, int d) { return nondet(); }
int IoCreateDevice(int a) { return nondet(); }
void ExFreePool(int a) {}
void PPBlockInits() {}
void PPUnblockInits() {}
void RtlInitUnicodeString(int a) {}

int __rho_1_;
int __rho_2_;
int __rho_3_;

void body() {
  set = 1; set = 0;
  PPBlockInits(); 
  while (1) {
    if (!(i < Pdolen)) break;
    __rho_2_ = PPMakeDeviceName(lptNamei, PdoType, dcIdi, num); 
    DName = __rho_2_;
    if (DName>0) { break; } 
    RtlInitUnicodeString(DName); 
    __rho_3_ = IoCreateDevice(Pdoi); pc = PC_IO; pc = PC_NIO;
    status = __rho_3_;
    if (STATUS_SUCCESS != status) { 
      Pdoi = 0; 
      if (STATUS_OBJECT_NAME_COLLISION == status) { 
	ExFreePool(DName); 
	num++; 
	//goto loc_continue; 
      } 
      break; 
    } else { 
      i++; 
    } 
  } 
  num = 0; 
  __rho_1_ = nondet();
  dummy = __rho_1_;
  if(dummy > 0) {
    unset = 1; unset = 0;
  }
  PPUnblockInits();
 loc_continue:0;
  while(1) { dummy=dummy; } L_return: return 0;
}

int main() { }
*/
% EF(forall([x], s=x /\ AG u!=1))
init(I,P,S,U,PC):=S=0,U=0,PC=1.
next(I,P,S,U,PC,Ip,Pp,Sp,Up,PCp):=
    PC=1,Ip=I,Pp=P,Sp=S+1,Up=U,PCp=2;
    PC=2,Ip=I,Pp=P,Sp=0,Up=U,PCp=3;
    PC=3,I<P,Ip=I+1,Pp=P,Sp=S,Up=U,PCp=3;
    PC=3,I<P,Ip=I,Pp=P,Sp=S,Up=U,PCp=4;
    PC=3,I>=P,Ip=I,Pp=P,Sp=S,Up=U,PCp=4;
    PC=4,Ip=I,Pp=P,Sp=S,Up=1,PCp=5;
    PC=4,Ip=I,Pp=P,Sp=S,Up=U,PCp=6;
    PC=5,Ip=I,Pp=P,Sp=S,Up=0,PCp=6.
dst(I,P,S,U,PC,X):=(U=<0;U>=2). 
p1(I,P,S,U,PC):=S=1,(U=<0;U>=2).
% init => EF p1
phi0(I,P,S,U,PC):-init(I,P,S,U,PC).
exists([Ip,Pp,Sp,Up,PCp],(rank(I,P,S,U,PC,Ip,Pp,Sp,Up,PCp),phi0(Ip,Pp,Sp,Up,PCp))):-phi0(I,P,S,U,PC),\+p1(I,P,S,U,PC).
wf(rank/10).
skolem_template(s3, [I,P,S,U,PC,Ip,Pp,Sp,Up,PCp],
    		true,
   		(PC>=1, PC=<5), 
  		(
  		  PC=1,Ip=I,Pp=P,Sp=S+1,Up=U,PCp=2;
  		  PC=2,Ip=I,Pp=P,Sp=0,Up=U,PCp=3;
  		  B1=0,PC=3,I<P,Ip=I+1,Pp=P,Sp=S,Up=U,PCp=3;
  		  B1=1,PC=3,I<P,Ip=I,Pp=P,Sp=S,Up=U,PCp=4;
  		  PC=3,I>=P,Ip=I,Pp=P,Sp=S,Up=U,PCp=4;
  		  B3=0,PC=4,Ip=I,Pp=P,Sp=S,Up=1,PCp=5;
  		  B3=1,PC=4,Ip=I,Pp=P,Sp=S,Up=U,PCp=6;
		  PC=5,Ip=I,Pp=P,Sp=S,Up=0,PCp=6
  		),
    		((B1=0;B1=1),(B3=0;B3=1))
    	       ).
% p1(v) => forall([x], aux(v,x)) 
aux(I,P,S,U,PC,X):-p1(I,P,S,U,PC).
% aux => s=x /\ AG u!=1
S=X:-aux(I,P,S,U,PC,X).
phi1(I,P,S,U,PC,X):-aux(I,P,S,U,PC,X).
phi1(Ip,Pp,Sp,Up,PCp,X):-phi1(I,P,S,U,PC,X),next(I,P,S,U,PC,Ip,Pp,Sp,Up,PCp). 
dst(I,P,S,U,PC,X):-phi1(I,P,S,U,PC,X).

query_naming(phi0(i,p,s,u,pc,x)).
query_naming(aux(i,p,s,u,pc,x)).
query_naming(phi1(i,p,s,u,pc,x)).
query_naming(s3(i,p,s,u,pc,'i\'','p\'','s\'','u\'','pc\'')).
query_naming(rank(i,p,s,u,pc,'i\'','p\'','s\'','u\'','pc\'')).
query_naming(rank_p(i,p,s,u,pc,'i\'','p\'','s\'','u\'','pc\'')).

query_finite_sorts(phi0/5,[5]).
query_finite_sorts(aux/6,[5]).
query_finite_sorts(phi1/6,[5]).
query_finite_sorts(s3/10,[5,10]).
query_finite_sorts(rank/10,[5,10]).
query_finite_sorts(rank_p/10,[5,10]).

% time ./ctlstar tests/ctlstar-ctlfo/35-2-EFandAG-fail.qarmc -no-extra-insert-pred -use-next-skolem
% CEX after 0.1 sec
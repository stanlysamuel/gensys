% No. 1 from Eric's paper (Industrial)
/*
#include "../ctl.h"

int n; int A; int R;
unsigned int pc;
int __phi() { return CAG(CIMP(CAP(A==1),CAF(CAP(R==1)))); }

int init() { A=0; R=0; }
int dobreak;

int body() {
  dobreak = nondet();
  while(1) {
    if (dobreak > 0) break;
    A = 1;
    A = 0;
    n = nondet();
    while(1) {
      if (!(n>0)) break;
	      //((n___old2 > loc_n)&&(loc_n>=0))
      n--;
    }
    R = 1;
    R=0;
    dobreak = nondet();
  }
  while(1) { dummy=dummy; } L_return: return 0;
}

int main() { }
*/
% AG (exists([x], a=x -> AF r=1))
init(A,R,N,PC):=A=0,R=0,PC=1.
next(A,R,N,PC,Ap,Rp,Np,PCp):=
    PC=1,Ap=A,Rp=R,Np=N,PCp=5;
    PC=1,Ap=1,Rp=R,Np=N,PCp=2;
    PC=2,Ap=0,Rp=R,Np=N,PCp=3;
    PC=3,N>0,Ap=A,Rp=R,Np=N-1,PCp=3;
    PC=3,N=<0,Ap=A,Rp=1,Np=N,PCp=4;
    PC=4,Ap=A,Rp=0,Np=N,PCp=1.
next2(A,R,N,PC,X,Ap,Rp,Np,PCp,X):=
    PC=1,Ap=A,Rp=R,Np=N,PCp=5;
    PC=1,Ap=1,Rp=R,Np=N,PCp=2;
    PC=2,Ap=0,Rp=R,Np=N,PCp=3;
    PC=3,N>0,Ap=A,Rp=R,Np=N-1,PCp=3;
    PC=3,N=<0,Ap=A,Rp=1,Np=N,PCp=4;
    PC=4,Ap=A,Rp=0,Np=N,PCp=1.
dst(A,R,N,PC,X):=R=1.
% AG p1
phi0(A,R,N,PC):-init(A,R,N,PC).
phi0(Ap,Rp,Np,PCp):-phi0(A,R,N,PC),next(A,R,N,PC,Ap,Rp,Np,PCp).
p1(A,R,N,PC):-phi0(A,R,N,PC).

% p1(v) => exists([x], aux(v,x))
exists([X],q1(X)):-id(1),p1(A,R,N,PC).
aux(A,R,N,PC,X):-s1(A,R,N,PC,X),p1(A,R,N,PC).
skolem_template(s1, [A,R,N,PC,X], true, true, X=Tx, (Tx=0;Tx=1)).

% aux(v,x) /\ a=x => AF r=1
phi1(A,R,N,PC,X):-aux(A,R,N,PC,X),A=X.
exists([Ap,Rp,Np,PCp,Xp],next2(A,R,N,PC,X,Ap,Rp,Np,PCp,Xp)):-phi1(A,R,N,PC,X),\+dst(A,R,N,PC,X).
phi1(Ap,Rp,Np,PCp,Xp):-phi1(A,R,N,PC,X),next(A,R,N,PC,Ap,Rp,Np,PCp),Xp=X,\+dst(A,R,N,PC,X).
rank(A,R,N,PC,Ap,Rp,Np,PCp):-phi1(A,R,N,PC,X),next(A,R,N,PC,Ap,Rp,Np,PCp),Xp=X,\+dst(A,R,N,PC,X).
wf(rank/8).

query_naming(phi0(a,r,n,pc)).
query_naming(p1(a,r,n,pc)).
query_naming(aux(a,r,n,pc,x)).
query_naming(phi1(a,r,n,pc,x)).
query_naming(rank(a,r,n,pc,'a\'','r\'','n\'','pc\'')).
query_naming(rank_p(a,r,n,pc,'a\'','r\'','n\'','pc\'')).

query_finite_sorts(phi0/4,[4]).
query_finite_sorts(p1/4,[4]).
query_finite_sorts(aux/5,[4]).
query_finite_sorts(phi1/5,[4]).
query_finite_sorts(rank/8,[4,8]).
query_finite_sorts(rank_p/8,[4,8]).

% time ./ctlstar tests/ctlstar-ctlfo/1-2-AGimpAF-succeed.qarmc -no-extra-insert-pred -use-next-skolem
% 'program correct' after 0.9 sec,
% No. 30 from Eric's paper (Industrial)
/*
#include "../ctl.h"

int n; int A; int R;
unsigned int pc;
int __phi() { return CEF(CAND(CAP(A==1),CEG(CAP(R!=5)))); }
int __rho_1_;

int init() { A=0; R=0; }
int dobreak;

int body() {
  dobreak = nondet();
  while(1) {
    if (dobreak > 0) break;
    A = 1;
    A = 0;
    __rho_1_ = nondet();
    n = __rho_1_;
    while(1) {
      if (!(n>0)) break;
      //  ((n___old2 > loc_n)&&(loc_n>=0))
      n--;
    }
    R = 1;
    R=0;
    dobreak = nondet();
  }
  while(1) { dummy=dummy; } L_return: return 0;  
}

int main() { }
*/
init(A,R,N,PC):=A=0,R=0,PC=1.
next(A,R,N,PC,Ap,Rp,Np,PCp):=
    PC=1,Ap=A,Rp=R,Np=N,PCp=5;
    PC=1,Ap=1,Rp=R,Np=N,PCp=2;
    PC=2,Ap=0,Rp=R,Np=N,PCp=3;
    PC=3,N>0,Ap=A,Rp=R,Np=N-1,PCp=3;
    PC=3,N=<0,Ap=A,Rp=1,Np=N,PCp=4;
    PC=4,Ap=A,Rp=0,Np=N,PCp=1.
dst(A,R,N,PC):=(R>=6;R=<4).
p1(A,R,N,PC):=A=1,(R>=6;R=<4).
% EF p1
phi0(A,R,N,PC):-init(A,R,N,PC).
exists([Ap,Rp,Np,PCp],(rank(A,R,N,PC,Ap,Rp,Np,PCp),phi0(Ap,Rp,Np,PCp))):-phi0(A,R,N,PC),\+p1(A,R,N,PC).
wf(rank/8).
skolem_template(s3, [A,R,N,PC,Ap,Rp,Np,PCp],
 		true,
		(PC>=1, PC=<4),
	       (
		 B>=1,PC=1,Ap=A,Rp=R,Np=N,PCp=5;
		 B=<0,PC=1,Ap=1,Rp=R,Np=N,PCp=2;
		 PC=2,Ap=0,Rp=R,Np=N,PCp=3;
		 PC=3,N>0,Ap=A,Rp=R,Np=N,PCp=3;
		 PC=3,N=<0,Ap=A,Rp=1,Np=N,PCp=4;
		 PC=4,Ap=A,Rp=0,Np=N,PCp=1
 		),
		(B=0;B=1)
 	       ).
% p1 => a=1 /\ EG r!=5
A=1:-p1(A,R,N,PC).
phi1(A,R,N,PC):-p1(A,R,N,PC).
exists([Ap,Rp,Np,PCp],phi1(Ap,Rp,Np,PCp)):-phi1(A,R,N,PC),next(A,R,N,PC,Ap,Rp,Np,PCp).
dst(A,R,N,PC):-phi1(A,R,N,PC).
skolem_template(s14, [A,R,N,PC,Ap,Rp,Np,PCp],
  		true,
 		( PC>=1, PC=<4),
		(
		  B>=1,PC=1,Ap=A,Rp=R,Np=N,PCp=5;
		  B=<0,PC=1,Ap=1,Rp=R,Np=N,PCp=2;
		  PC=2,Ap=0,Rp=R,Np=N,PCp=3;
		  PC=3,N>0,Ap=A,Rp=R,Np=N,PCp=3;
		  PC=3,N=<0,Ap=A,Rp=1,Np=N,PCp=4;
		  PC=4,Ap=A,Rp=0,Np=N,PCp=1
  		),
		(B=0;B=1)
  	       ).

query_naming(phi0(a,r,n,pc)).
query_naming(phi1(a,r,n,pc)).
query_naming(s3(a,r,n,pc,'a\'','r\'','n\'','pc\'')).
query_naming(s14(a,r,n,pc,'a\'','r\'','n\'','pc\'')).
query_naming(rank(a,r,n,pc,'a\'','r\'','n\'','pc\'')).
query_naming(rank_p(a,r,n,pc,'a\'','r\'','n\'','pc\'')).

query_finite_sorts(phi0/4,[4]).
query_finite_sorts(phi1/4,[4]).
query_finite_sorts(s3/8,[4,8]).
query_finite_sorts(s14/8,[4,8]).
query_finite_sorts(rank/8,[4,8]).
query_finite_sorts(rank_p/8,[4,8]).

prog_rep([A,R,N,PC,Ap,Rp,Np,PCp],
	 (A=0,R=0,PC=1),
	 (
	   PC=1,Ap=A,Rp=R,Np=N,PCp=5;
	   PC=1,Ap=1,Rp=R,Np=N,PCp=2;
	   PC=2,Ap=0,Rp=R,Np=N,PCp=3;
	   PC=3,N>0,Ap=A,Rp=R,Np=N-1,PCp=3;
	   PC=3,N=<0,Ap=A,Rp=1,Np=N,PCp=4;
	   PC=4,Ap=A,Rp=0,Np=N,PCp=1
	 )
	).
% time ./ctlstar tests/ctlstar-Erics/Industrial/30-acqrel-EFandEG-succeed.qarmc -no-extra-insert-pred -use-next-skolem
% 'program correct' after 0.8 sec
% With '-case-split': 'program is correct' after 0.4 sec

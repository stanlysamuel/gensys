% No. 48 from Eric's paper (Industrial)
/*
#include "../ctl.h"

// Property: G F WItemsNum >= 1

int WItemsNum;
unsigned int pc;
int __rho_1_;
int __rho_2_;
int __phi() { return CEF(CAG(CAP(WItemsNum<1))); }

void init() { WItemsNum = nondet(); }

void callback1() {}
void callback2() {}
#define MoreWItems() nondet()

void body() {
  __rho_1_ = nondet();
    WItemsNum = __rho_1_;
    if(WItemsNum<0) {
      while (1) { WItemsNum = WItemsNum; }
    }
    while(1) {
      while(1) { 
	__rho_2_ = MoreWItems();
	if (WItemsNum<=5) { if (__rho_2_>0) break; }
               if (WItemsNum<=5) {
                   callback1();
                   WItemsNum++;
    
               } else {
                   WItemsNum++;
               }
        }
    
      while(1) { 
	if (!(WItemsNum>2)) break;
             callback2();
             WItemsNum--;
        }
    }
  while(1) { dummy=dummy; } L_return: return 0;
}
    
int main () {}
*/
init(W,PC):=PC=1. 
next(W,PC,Wp,PCp):=
    PC=1,PCp=2;
    PC=2,W<0,Wp=W,PCp=7;
    PC=7,Wp=W,PCp=7;
    PC=2,W>=0,Wp=W,PCp=3;
    PC=3,W=<5,Wp=W,PCp=5;
    PC=3,W>5,Wp=W,PCp=4;
    PC=4,Wp=W+1,PCp=3;
    PC=5,Wp=W,PCp=4;
    PC=5,Wp=W,PCp=6;
    PC=6,W=<2,Wp=W,PCp=3;
    PC=6,W>2,Wp=W-1,PCp=6.
dst(W,PC):=W=<0.
p1(W,PC):=W=<0,PC=7.
% EF p1 
phi0(W,PC):-init(W,PC).
exists([Wp,PCp],(rank(W,PC,Wp,PCp),phi0(Wp,PCp))):-phi0(W,PC),\+p1(W,PC).
wf(rank/4).
skolem_template(s3, [W,PC,Wp,PCp],
 		true,
		(PC>=1, PC=<7),
		(
		  PC=1,Wp=T,PCp=2;
		  PC=2,W<0,Wp=W,PCp=7;
		  PC=7,Wp=W,PCp=7;
		  PC=2,W>=0,Wp=W,PCp=3;
		  PC=3,W=<5,Wp=W,PCp=5;
		  PC=3,W>5,Wp=W,PCp=4;
		  PC=4,Wp=W+1,PCp=3;
		  B>=1,PC=5,Wp=W,PCp=4;
		  B=<0,PC=5,Wp=W,PCp=6;
		  PC=6,W=<2,Wp=W,PCp=3;
		  PC=6,W>2,Wp=W-1,PCp=6
		),
 		((B=0;B=1),(T=0;T= -1))
 	       ).
% p1 => AG w<1
phi1(W,PC):-p1(W,PC).
phi1(Wp,PCp):-phi1(W,PC),next(W,PC,Wp,PCp).
dst(W,PC):-phi1(W,PC).

query_naming(phi0(w,pc)).
query_naming(phi1(w,pc)).
query_naming(s3(w,pc,'w\'','pc\'')).
query_naming(rank(w,pc,'w\'','pc\'')).
query_naming(rank_p(w,pc,'w\'','pc\'')).

query_finite_sorts(phi0/2,[2]).
query_finite_sorts(phi1/2,[2]).
query_finite_sorts(s3/4,[2,4]).
query_finite_sorts(rank/4,[2,4]).
query_finite_sorts(rank_p/4,[2,4]).

% time ./ctlstar tests/ctlstar-Erics/48-EFAG-succeed.qarmc -no-extra-insert-pred -use-next-skolem
% 'program correct' after 0.5 sec
% With '-case-split': 'program correct' after 0.4 sec
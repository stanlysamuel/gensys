% No. 9 from Eric's paper
% agafp-succeed/original.c in the benchmarks
/*
#include "../ctl.h"

// ************************************************************
// EXPECTED RANKING:    y' < y  /\  y > 0
// ************************************************************

int x, y, p;
unsigned int pc;
int __phi() { return CAG( CAF( CAP(p > 0) )); }
int __rho_1_;
int __rho_2_;

void init() { p = 0; }

int body() {
  if(x>0) {
    p = p + 1;
  }
  else {
    while(1) { if (!(y > 0)) break; y = y - 1; }
    p = 1;
  }
  while(1) { if(dummy>0) break; } L_return: return 0;
}

int main() {}
*/
init(X,Y,P,PC):=P=0,PC=1.
next(X,Y,P,PC,Xp,Yp,Pp,PCp):=
    X>0,PC=1,Xp=X,Yp=Y,Pp=P+1,PCp=2;
    X=<0,PC=1,Xp=X,Yp=Y,Pp=P,PCp=3;
    Y>0,PC=3,Xp=X,Yp=Y-1,Pp=P,PCp=3;
    Y=<0,PC=3,Xp=X,Yp=Y,Pp=1,PCp=4.
dst(X,Y,P,PC):=P>0.
% AG p1
phi0(X,Y,P,PC):-init(X,Y,P,PC).
phi0(Xp,Yp,Pp,PCp):-phi0(X,Y,P,PC),next(X,Y,P,PC,Xp,Yp,Pp,PCp).
p1(X,Y,P,PC):-phi0(X,Y,P,PC).
% p1 => AF p>0
phi1(X,Y,P,PC):-p1(X,Y,P,PC).
exists([Xp,Yp,Pp,PCp],next(X,Y,P,PC,Xp,Yp,Pp,PCp)):-phi1(X,Y,P,PC),\+dst(X,Y,P,PC).
phi1(Xp,Yp,Pp,PCp):-phi1(X,Y,P,PC),next(X,Y,P,PC,Xp,Yp,Pp,PCp),\+dst(X,Y,P,PC).
rank(X,Y,P,PC,Xp,Yp,Pp,PCp):-phi1(X,Y,P,PC),next(X,Y,P,PC,Xp,Yp,Pp,PCp),\+dst(X,Y,P,PC).
wf(rank/8).

query_naming(init(x,y,p,pc)).
query_naming(phi0(x,y,p,pc)).
query_naming(phi1(x,y,p,pc)).
query_naming(next(x,y,p,pc,'x\'','y\'','p\'','pc\'')).
query_naming(rank(x,y,p,pc,'x\'','y\'','p\'','pc\'')).
query_naming(rank_p(x,y,p,pc,'x\'','y\'','p\'','pc\'')).

% time ./ctlstar tests/ctlstar-Erics/9-AGAF-succeed.qarmc -no-extra-insert-pred
% 'program correct' after 1.6 sec
% No. 24 from Eric's paper
% egimpefp-succeed/original.c in the benchmarks
/*
#include "../ctl.h"

// ************************************************************
// EXPECTED CHUTE:      __rho_1_ > 0     and     __rho_2_ <= 0
//
// EXPECTED RANKING:    x' < x  /\  x > 0
// ************************************************************

int x, p, t, check;
unsigned int pc;
int __phi() { return CEG( CIMP(CAP(check==1),CEF( CAP(p > 0) ) )); }
int __rho_1_;
int __rho_2_;

void init() { p = 0; check = 0; }

int body() {
  while(1) {
    DOCHECK();
    __rho_1_ = nondet();
    if (__rho_1_ > 0) {
      while(1) {
	if (! (x > 0)) break; 
	__rho_2_ = nondet();
	if(__rho_2_ <= 0) {
	  x = x - 1;
	} else {
	  t = nondet();
	  assume(t > 0);
	  x = x + t;
	}
      }
      p = 1;
    }
    p = 0;
  }
}

int main() {}
*/
init(X,C,P,PC):=C=0,P=0,PC=1.
next(X,C,P,PC,Xp,Cp,Pp,PCp):=
    PC=1,Xp=X,Cp=1,Pp=P,PCp=2;
    PC=2,Xp=X,Cp=C,Pp=P,PCp=3;
    PC=2,Xp=X,Cp=C,Pp=P,PCp=5;
    PC=3,Xp=X,Cp=C,Pp=0,PCp=1;
    PC=5,X>0,Xp=X-1,Cp=C,Pp=P,PCp=5;
    PC=5,X>0,Xp=X+1,Cp=C,Pp=P,PCp=5;
    PC=5,X=<0,Cp=C,Pp=1,PCp=3.
dst(X,C,P,PC):=P>0.
% EG p1
phi0(X,C,P,PC):-init(X,C,P,PC).
exists([Xp,Cp,Pp,PCp],phi0(Xp,Cp,Pp,PCp)):-phi0(X,C,P,PC),next(X,C,P,PC,Xp,Cp,Pp,PCp).
p1(X,C,P,PC):-phi0(X,C,P,PC).

skolem_template(s3, [X,C,P,PC,Xp,Cp,Pp,PCp],
 		true,
 		(PC=1 ; B1=<0,PC=2; B1>=1,PC=2 ; PC=3 ; B2=<0,X>0,PC=5 ; B2>=1,X>0,PC=5 ; PC=5,X=<0),
 		(
		  PC=1,Xp=X,Cp=1,Pp=P,PCp=2;
		  B1=<0,PC=2,Xp=X,Cp=C,Pp=P,PCp=3;
		  B1>=1,PC=2,Xp=X,Cp=C,Pp=P,PCp=5;
		  PC=3,Xp=X,Cp=C,Pp=0,PCp=1;
		  B2=<0,PC=5,X>0,Xp=X-1,Cp=C,Pp=P,PCp=5;
		  B2>=1,PC=5,X>0,Xp=X+1,Cp=C,Pp=P,PCp=5;
		  PC=5,X=<0,Cp=C,Pp=1,PCp=3
 		),
 		((B1=0;B1=1),(B2=0;B2=1))
 	       ).
% p1 /\ c=1 => EF p>0
phi1(X,C,P,PC):-p1(X,C,P,PC),C=1.
exists([Xp,Cp,Pp,PCp],(rank(X,C,P,PC,Xp,Cp,Pp,PCp),phi1(Xp,Cp,Pp,PCp))):-phi1(X,C,P,PC),\+dst(X,C,P,PC).
%exists([Xp,Cp,Pp,PCp],next(X,C,P,PC,Xp,Cp,Pp,PCp)):-phi1(X,C,P,PC),\+dst(X,C,P,PC). % domain clause***
wf(rank/8).
skolem_template(s9, [X,C,P,PC,Xp,Cp,Pp,PCp],
 		true,
		true,
% 		(PC=1 ; B1=<0,PC=2; B1>=1,PC=2 ; PC=3 ; B2=<0,X>0,PC=5 ; B2>=1,X>0,PC=5 ; PC=5,X=<0),
 		(
		  PC=1,Xp=X,Cp=1,Pp=P,PCp=2;
		  B1=<0,PC=2,Xp=X,Cp=C,Pp=P,PCp=3;
		  B1>=1,PC=2,Xp=X,Cp=C,Pp=P,PCp=5;
		  PC=3,Xp=X,Cp=C,Pp=0,PCp=1;
		  B2=<0,PC=5,X>0,Xp=X-1,Cp=C,Pp=P,PCp=5;
		  B2>=1,PC=5,X>0,Xp=X+1,Cp=C,Pp=P,PCp=5;
		  PC=5,X=<0,Cp=C,Pp=1,PCp=3
 		),
 		((B1=0;B1=1),(B2=0;B2=1))
 	       ).

query_naming(init(x,c,p,pc)).
query_naming(phi0(x,c,p,pc)).
query_naming(phi1(x,c,p,pc)).
query_naming(p1(x,c,p,pc)).
query_naming(next(x,c,p,pc,'x\'','c\'','p\'','pc\'')).
query_naming(rank(x,c,p,pc,'x\'','c\'','p\'','pc\'')).
query_naming(rank_p(x,c,p,pc,'x\'','c\'','p\'','pc\'')).
query_naming(s3(x,c,p,pc,'x\'','c\'','p\'','pc\'')).
query_naming(s9(x,c,p,pc,'x\'','c\'','p\'','pc\'')).

% time ./ctlstar tests/ctlstar-Erics/24-EGimpEF-succeed.qarmc -no-extra-insert-pred -use-next-skolem
% 'program is correct' after 3.6s (changed flags from B1=0 to B1=<0)
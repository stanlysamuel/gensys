% No. 11 from Eric's paper
% agefp-succeed/original.c in the benchmarks
/*
#include "../ctl.h"

// ************************************************************
// EXPECTED CHUTE:      __rho_1_ > 0
//
// EXPECTED RANKING:    x' < x  /\  x > 0
// ************************************************************

int x, p;
unsigned int pc;
int __phi() { return CAG( CEF( CAP(p > 0) ) ); }
int __rho_1_;
int __rho_2_;

void init() { p = 0; x = 5; start = 0; }

int body() {
  while(1) {
    if(x < 0) { break; }
    __rho_1_ = nondet();
    if (__rho_1_ > 0) {
      x = x - 1;
    }
  }
  p = 1;
  while(1) { if(dummy>0) break; } L_return: return 0;
}

int main() {}
*/
init(X,P,PC):=X=5,P=0,PC=1.
next(X,P,PC,Xp,Pp,PCp):=
    X>=0,PC=1,Xp=X-1,Pp=P,PCp=1;
    X>=0,PC=1,Xp=X,Pp=P,PCp=1;
    X<0,PC=1,Xp=X,Pp=1,PCp=2.
dst(X,P,PC):=P>0.
% AG p1
phi0(X,P,PC):-init(X,P,PC).
phi0(Xp,Pp,PCp):-phi0(X,P,PC),next(X,P,PC,Xp,Pp,PCp).
p1(X,P,PC):-phi0(X,P,PC).
% p1 => EF p>0
phi1(X,P,PC):-p1(X,P,PC).
exists([Xp,Pp,PCp],(rank(X,P,PC,Xp,Pp,PCp),phi1(Xp,Pp,PCp))):-phi1(X,P,PC),\+dst(X,P,PC).
PC=1:-phi1(X,P,PC),\+dst(X,P,PC). % domain clause***
wf(rank/6).

skolem_template(s9, [X,P,PC,Xp,Pp,PCp],
 		true,
		(B=0,X>=0; B=1,X>=0 ; X<0),
 		(
		  B=0,X>=0,PC=1,Xp=X-1,Pp=P,PCp=1;
		  B=1,X>=0,PC=1,Xp=X,  Pp=P,PCp=1;
		  X<0, PC=1,Xp=X,  Pp=1,PCp=2
		),
 		(B=0;B=1)
 	       ).

query_naming(init(x,p,pc)).
query_naming(phi0(x,p,pc)).
query_naming(phi1(x,p,pc)).
query_naming(next(x,p,pc,'x\'','p\'','pc\'')).
query_naming(rank(x,p,pc,'x\'','p\'','pc\'')).
query_naming(rank_p(x,p,pc,'x\'','p\'','pc\'')).
query_naming(s9(x,p,pc,'x\'','p\'','pc\'')).

% time ./ctlstar tests/ctlstar-Erics/11-AGEF-succeed.qarmc -no-extra-insert-pred
% 'program correct' after 2.2 sec with s9 = (x>=0,pc=1,x'=x-1,p'=p,pc'=1 ; x<0,pc=1,x'=x,p'=1,pc'=2)
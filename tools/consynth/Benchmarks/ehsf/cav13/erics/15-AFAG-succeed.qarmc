% No. 15 from Eric's paper
% afagp-succeed/original.c in the benchmarks
/*
#include "../ctl.h"

// ************************************************************
// EXPECTED RANKING:    x' < x  /\  x > 0
// ************************************************************

int x, p, nd;
unsigned int pc;
int __phi() { return CAF( CAG( CAP(p > 0) ) ); }

void init() { p = 0; }

int body() {
  while(1) {
    if (!(x > 0)) break;
    nd = nondet();
    if (nd > 0) {
      x = x - 1; 
    } else {
      x = x - 2; 
    }
  }
  while(1) {
    nd = nondet();
    if (nd > 0)
      p = 1;
    else 
      p = 2;
  }
  while(1) { if(dummy>0) break; } L_return: return 0;
}

int main() {}
*/
init(X,P,PC):=P=0,PC=1.
next(X,P,PC,Xp,Pp,PCp):=
    X>0,PC=1,Xp=X-1,Pp=P,PCp=1;
    X>0,PC=1,Xp=X-2,Pp=P,PCp=1;
    X=<0,PC=1,Xp=X,Pp=P,PCp=2;
    PC=2,Xp=X,Pp=1,PCp=2;
    PC=2,Xp=X,Pp=2,PCp=2.
dst(X,P,PC):=P>0.
p1(X,P,PC):=P>0.
% AF p1
inv0(X,P,PC):-init(X,P,PC).
exists([Xp,Pp,PCp],next(X,P,PC,Xp,Pp,PCp)):-inv0(X,P,PC),\+p1(X,P,PC).
rank(X,P,PC,Xp,Pp,PCp):-inv0(X,P,PC),\+p1(X,P,PC),next(X,P,PC,Xp,Pp,PCp).
inv0(Xp,Pp,PCp):-inv0(X,P,PC),\+dst(X,P,PC),next(X,P,PC,Xp,Pp,PCp).
wf(rank/6).
% p1 => AG p>0
phi1(X,P,PC):-p1(X,P,PC).
phi1(Xp,Pp,PCp):-phi1(X,P,PC),next(X,P,PC,Xp,Pp,PCp).
dst(X,P,PC):-phi1(X,P,PC).

% time ./ctlstar tests/ctlstar-Erics/15-AFAG-succeed.qarmc -no-extra-insert-pred
% 'program correct' after 1.0 sec